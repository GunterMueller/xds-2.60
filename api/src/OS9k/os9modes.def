(* os9modes.def  Feb 27  17:27:45  2000 *)
(* Generated by H2D v1.31.0 from os9modes.h. *)
<*+ M2ADDTYPES *>
<*+ M2EXTENSIONS *>
<*+ NOHEADER *> 
<* IF NOT DEFINED(GENTYPEDEF) THEN *> <* NEW GENTYPEDEF+ *> <* END *>

DEFINITION MODULE ["C"] os9modes;

IMPORT os9types, os9module, os9lock, os9process, SYSTEM;
(* H2D:  Required IMPORT clause: 
IMPORT os9modes, os9types, os9io, os9module, os9lock, os9process;
*)

(*  File access modes  *)

CONST 
  S_IFMT = 0FFFFH;   (*  mask for type of file  *)
  S_IBLKMODE = 80H;   (*  block mode  *)
  S_ITRUNC = 100H;   (*  truncate on open mode  *)
  S_ICONTIG = 200H;   (*  ensure contiguous file mode  *)
  S_IEXCL = 400H;   (*  error if file exists on create mode  *)
  S_ICREAT = 800H;   (*  create file mode  *)
  S_IAPPEND = 1000H;   (*  append to file mode  *)
  S_ISIZE = 2000H;   (*  set initial file size  *)
  S_ISHARE = 4000H;   (*  non-sharable mode  *)
  S_IFDIR = 8000H;   (*  directory mode  *)
  FAM_READ = 1H;   (*  read mode  *)
  FAM_WRITE = 2H;   (*  write mode  *)
  FAM_EXEC = 4H;   (*  execute mode (search execution directory)  *)
  FAM_BLKMODE = 80H;   (*  block mode  *)
  FAM_NOCREATE = 400H;   (*  don't recreate existing file mode  *)
  FAM_APPEND = 1000H;   (*  append mode  *)
  FAM_SIZE = 2000H;   (*  initial size specified mode  *)
  FAM_NONSHARE = 4000H;   (*  non-sharable mode  *)
  FAM_DIR = 8000H;   (*  directory mode  *)

(*  File access permissions  *)

CONST 
  S_IPRM = 0FFFFH;   (*  mask for permission bits  *)
  S_IREAD = 1H;   (*  owner read mode/permission  *)
  S_IWRITE = 2H;   (*  owner write mode/permission  *)
  S_IEXEC = 4H;   (*  owner execute mode/permission  *)
  S_ISEARCH = 4H;   (*  search permission (directories)  *)
  S_IGREAD = 10H;   (*  group read permission  *)
  S_IGWRITE = 20H;   (*  group write permission  *)
  S_IGEXEC = 40H;   (*  group execute permission  *)
  S_IGSEARCH = 40H;   (*  group search permission (directories)  *)
  S_IOREAD = 100H;   (*  public read permission  *)
  S_IOWRITE = 200H;   (*  public write permission  *)
  S_IOEXEC = 400H;   (*  public execute permission  *)
  S_IOSEARCH = 400H;   (*  public search permission (directories)  *)
  FAP_READ = 1H;   (*  file created with owner read permission  *)
  FAP_WRITE = 2H;   (*  file created with owner write permission  *)
  FAP_EXEC = 4H;   (*  file created with owner execute permission  *)
  FAP_GREAD = 10H;   (*  file created with group read permission  *)
  FAP_GWRITE = 20H;   (*  file created with group write permission  *)
  FAP_GEXEC = 40H;   (*  file created with group execute permission  *)
  FAP_PREAD = 100H;   (*  file created with world read permission  *)
  FAP_PWRITE = 200H;   (*  file created with world write permission  *)
  FAP_PEXEC = 400H;   (*  file created with world execute permission  *)

PROCEDURE _os_chdir ( arg0: os9types.PtrSChar;
		      arg1: os9types.u_int32 ): os9types.error_code;

PROCEDURE _os_close ( arg0: os9types.path_id ): os9types.error_code;

PROCEDURE _os_create ( arg0: os9types.PtrSChar; arg1: SYSTEM.unsigned;
		       arg2: os9types.Ptrpath_id; arg3: SYSTEM.unsigned;
		       SEQ arg4: SYSTEM.BYTE ): os9types.error_code;

PROCEDURE _os_delete ( arg0: os9types.PtrSChar;
		       arg1: os9types.u_int32 ): os9types.error_code;

PROCEDURE _os_dup ( arg0: os9types.path_id;
		    arg1: os9types.Ptrpath_id ): os9types.error_code;
PROCEDURE _os_makdir ( arg0: os9types.PtrSChar; arg1: SYSTEM.unsigned;
                       arg2: SYSTEM.unsigned;
		       SEQ arg3: SYSTEM.BYTE ): os9types.error_code;
PROCEDURE _os_open ( arg0: os9types.PtrSChar; arg1: os9types.u_int32;
		     arg2: os9types.Ptrpath_id ): os9types.error_code;

PROCEDURE _os_read ( arg0: os9types.path_id; arg1: SYSTEM.ADDRESS;
		     arg2: os9types.Ptrpath_id ): os9types.error_code;

PROCEDURE _os_readln ( arg0: os9types.path_id; arg1: SYSTEM.ADDRESS;
		       arg2: os9types.Ptrpath_id ): os9types.error_code;

PROCEDURE _os_seek ( arg0: os9types.path_id;
		     arg1: os9types.u_int32 ): os9types.error_code;

PROCEDURE _os_write ( arg0: os9types.path_id; arg1: SYSTEM.ADDRESS;
		      arg2: os9types.Ptrpath_id ): os9types.error_code;

PROCEDURE _os_writeln ( arg0: os9types.path_id; arg1: SYSTEM.ADDRESS;
			arg2: os9types.Ptrpath_id ): os9types.error_code;

PROCEDURE _os_ioconfig ( arg0: os9types.u_int32;
			 arg1: SYSTEM.ADDRESS ): os9types.error_code;

END os9modes.
