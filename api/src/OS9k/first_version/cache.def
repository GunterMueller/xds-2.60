(* cache.def  Feb 26  12:23:11  2000 *)
(* Generated by H2D v1.31.0 from cache.h. *)
<*+ M2ADDTYPES *>
<*+ M2EXTENSIONS *>
<*+ NOHEADER *> 
<* IF NOT DEFINED(GENTYPEDEF) THEN *> <* NEW GENTYPEDEF+ *> <* END *>

DEFINITION MODULE ["C"] cache;

IMPORT types, SYSTEM;
(* H2D:  Required IMPORT clause: 
IMPORT cache, types;
*)

CONST 
  C_FLUSH = 0H;     (*  generic flush operation (flush all caches)  *)
  C_ENDATA = 1H;    (*  enable data cache  *)
  C_DISDATA = 2H;   (*  disable data cache  *)
  C_FLDATA = 4H;    (*  flush data cache  *)
  C_INVDATA = 8H;   (*  invalidate data cache  *)
  C_STODATA = 10000H;(*  store data cache  *)
  C_ENINST = 10H;   (*  enable instruction cache  *)
  C_DISINST = 20H;  (*  disable instruction cache  *)
  C_FLINST = 40H;   (*  flush intruction cache  *)
  C_INVINST = 80H;  (*  invalidate instruction cache  *)
  C_GETCCTL = 8000H;(*  get cache control routine/statics  *)
  C_ADDR = 100H;    (*  flags a target address for cache operation  *)

(*  Memory cache mode list definition  *)

TYPE 
  Ptru_int32 = POINTER TO types.u_int32;

  cachelist = RECORD
    blk_beg : Ptru_int32;     (*  beginning address of memory region  *)
    blk_end : Ptru_int32;     (*  ending address + 1 of memory region  *)
    mode    : types.u_int32;  (*  cache mode of region (hardware specific)  *)
    reserved: types.u_int32;  (*  reserved for future use  *)
  END;

  Cachelist = POINTER TO cachelist;

(*  Logical cache mode definitions for the user and system state cache lists.  *)

CONST 
  CM_DWTHRU = 80000000H;   (*  data cache write-through mode  *)
  CM_DINHIB = 40000000H;   (*  data cache inhibited mode  *)
  CM_DCOHER = 20000000H;   (*  data cache coherent mode  *)
  CM_DGUARD = 10000000H;   (*  data cache guarded mode  *)
  CM_DNPFTCH = 8000000H;   (*  data cache no prefetch mode  *)
  CM_IINHIB = 4000H;   (*  instruction cache inhibited mode  *)
  CM_ICOHER = 2000H;   (*  instruction cache coherent mode  *)
  CM_IGUARD = 1000H;   (*  instruction cache guarded mode  *)

END cache.
