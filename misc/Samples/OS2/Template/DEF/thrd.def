(**************************************************************************
 *  File name  :  thrd.def
 *
 *  Description:  This module contains the code for a background processing
 *                thread as well as the code for any routines used in that
 *                thread.
 *
 *                This thread uses an object window to facilitate
 *                communication with the main thread.  The main thread can
 *                communicate with the background thread through messages.
 *                You define your own window messages in main.h, post or send
 *                them to the background thread through the routines provided
 *                in this file, and then process the messages in the
 *                ObjectWndProc() routine.  The object window then sends
 *                other messages back to the main window to notify the main
 *                window as to the status of the task or with the final
 *                result.
 *
 *                An object window is used as the main window of the thread
 *                for several reasons.  The window is hidden, so it is
 *                never displayed on the screen.  Since it is hidden, the
 *                window does not have to process most of the window
 *                messages that are processed by visible windows, e.g.
 *                WM_PAINT, WM_SIZE, WM_SETFOCUS, etc.  This window will
 *                never receive the focus so it need not process input
 *                messages.  You can, however, send all mouse and keyboard
 *                messages to this window and have it process all input if
 *                you wish.  Since the window does not belong to any focus
 *                or activation chains, you can block this thread on a
 *                semaphore without having the system lock up or use the
 *                window manager semaphore routines such as
 *                WinMsgSemWait().
 *
 *                The BackgroundThread() routine is designed to create only
 *                one thread.  Should you try to create another one, the
 *                call will fail.  The thread uses several variables
 *                which are defined globally within this module.  In order
 *                to enable this routine to create multiple threads, you
 *                will need to make these variables local.  You will also
 *                need to differentiate between the different object
 *                windows created so that you can specify which thread will
 *                receive a posted message.
 *
 *                In order to enable the use of the second thread, set
 *                the BACKGROUND_THREAD option ON in the project file.
 *                Also, set ON the MULTITHREAD option in order to have
 *                your program linked with multithread libraries.
 *
 *                This module exports the following procedures:
 *
 *                CreateBackgroundThread()
 *                DestroyBackgroundThread()
 *                PostBkThreadMsg(msg, mp1, mp2)
 *                SendBkThreadMsg(msg, mp1, mp2)
 *
 *  Concepts   :  background thread
 *
 *  Copyright (C) 1996 xTech Ltd. All rights reserved.
 *  Copyright (C) 1991 IBM Corporation
 *
 *      DISCLAIMER OF WARRANTIES.  The following [enclosed] code is
 *      sample code created by IBM Corporation. This sample code is not
 *      part of any standard or IBM product and is provided to you solely
 *      for  the purpose of assisting you in the development of your
 *      applications.  The code is provided "AS IS", without
 *      warranty of any kind.  IBM shall not be liable for any damages
 *      arising out of your use of the sample code, even if they have been
 *      advised of the possibility of such damages.
 *************************************************************************)
DEFINITION MODULE thrd;

IMPORT OS2;

PROCEDURE CreateBackgroundThread() : OS2.BOOL;
PROCEDURE DestroyBackgroundThread;
PROCEDURE PostBkThreadMsg(msg : OS2.ULONG; mp1, mp2 : OS2.MPARAM) : OS2.BOOL;
PROCEDURE SendBkThreadMsg(msg : OS2.ULONG; mp1, mp2 : OS2.MPARAM) : OS2.MRESULT;

END thrd.
