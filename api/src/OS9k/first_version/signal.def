(* signal.def  Mar 1  18:18:44  2000 *)
(* Generated by H2D v1.31.0 from signal.h. *)
<*+ M2ADDTYPES *>
<*+ M2EXTENSIONS *>
<*+ NOHEADER *> 
<* IF NOT DEFINED(GENTYPEDEF) THEN *> <* NEW GENTYPEDEF+ *> <* END *>

DEFINITION MODULE ["C"] signal;

IMPORT types, SYSTEM;
(* H2D:  Required IMPORT clause: 
IMPORT signal, types;
*)


CONST 
  SIGKILL = 4;   (*  system abort (cannot be caught or ignored)  *)
  SIGWAKE = 1;   (*  wake up  *)
  SIGQUIT = 2;   (*  keyboard abort  *)
  SIGINT = 3;   (*  keyboard interrupt  *)
  SIGHUP = 5;   (*  modem hangup signal  *)

(*  non-ANSI System defined signals and macro  *)


CONST 
  S_WAKE = 1;   (*  wakeup process signal  *)
  S_QUIT = 2;   (*  keyboard abort  *)
  S_INT = 3;   (*  keyboard interrupt  *)
  S_KILL = 4;   (*  kill process signal  *)
  S_HANGUP = 5;   (*  hang up process signal  *)

(*  Post-ANSI OS-9/OS-9000 signals  *)


CONST 
  SIGCHECK = 41;   (*  machine check  *)
  SIGALIGN = 42;   (*  alignment  *)
  SIGINST = 43;   (*  instruction fetch  *)
  SIGPRIV = 44;   (*  privilege  *)

(*  ANSI signals  *)

CONST 
  SIGABRT = 32;   (*  abort signal  *)
  SIGFPE = 33;   (*  erroneous arithmetic operation (not always FPU)  *)
  SIGILL = 34;   (*  illegal function image (illegal instruction)  *)
  SIGSEGV = 35;   (*  segment violation (bus error)  *)
  SIGTERM = 36;   (*  termination request  *)

(*  POSIX signals (not directly support)  *)

CONST 
  SIGALRM = 37;   (*  alarm time elapsed  *)
  SIGPIPE = 38;   (*  write to pipe with no readers  *)
  SIGUSR1 = 39;   (*  user signal #1  *)
  SIGUSR2 = 40;   (*  user signal #2  *)
  _SIG_ERR = -1;

(* #define	SIG_ERR		((void ( * )())_SIG_ERR) *)
(*  atomic signal typedef  *)

TYPE 
  sig_atomic_t = SYSTEM.unsigned;

PROCEDURE signal ( arg0: SYSTEM.int; arg1: types.ProcSint ): types.ProcSint;

PROCEDURE raise ( arg0: SYSTEM.int ): SYSTEM.int;

PROCEDURE _os_intercept ( arg0: types.ProcBYTE;
			  arg1: SYSTEM.ADDRESS ): types.error_code;

PROCEDURE _os_rte (  ): types.error_code;

PROCEDURE _os_send ( arg0: types.process_id;
		     arg1: types.signal_code ): types.error_code;

PROCEDURE _os_sigmask ( arg0: types.int32 ): types.error_code;

PROCEDURE _os_sigreset (  ): types.error_code;

PROCEDURE _os_siglngj ( arg0: SYSTEM.ADDRESS;
			arg1: types.u_int16 ): types.error_code;

PROCEDURE _os_clrsigs ( arg0: types.process_id ): types.error_code;

PROCEDURE _os_sigrs ( arg0: types.u_int32 ): types.error_code;

PROCEDURE _os_sleep ( arg0: types.Ptru_int32;
		      arg1: types.Ptru_int32 ): types.error_code;

(*  special addresses  *)

CONST 
  _SIG_DFL = 0;
  _SIG_IGN = 1;

END signal.
