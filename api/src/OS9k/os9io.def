(* os9io.def  Feb 27  19:16:20  2000 *)
(* Generated by H2D v1.31.0 from os9io.h. *)
<*+ M2ADDTYPES *>
<*+ M2EXTENSIONS *>
<*+ NOHEADER *> 
<* IF NOT DEFINED(GENTYPEDEF) THEN *> <* NEW GENTYPEDEF+ *> <* END *>

DEFINITION MODULE ["C"] os9io;

IMPORT os9types, os9module, os9lock, os9process, SYSTEM;
(* H2D:  Required IMPORT clause: 
IMPORT os9io, os9types, os9module, os9lock, os9process;
*)


CONST 
  DT_SCF = 0;   (*  sequential character file type 			 *)
  DT_RBF = 1;   (*  random block file type		 			 *)
  DT_PIPE = 2;   (*  pipe file type							 *)
  DT_SBF = 3;   (*  sequential block file type				 *)
  DT_NFM = 4;   (*  network file type						 *)
  DT_CDFM = 5;   (*  compact disc file type					 *)
  DT_UCM = 6;   (*  user communication manager				 *)
  DT_SOCK = 7;   (*  socket communication manager				 *)
  DT_PTTY = 8;   (*  pseudo-keyboard manager					 *)
  DT_GFM = 9;   (*  graphics file manager					 *)
  DT_PCF = 10;   (*  ms-dos file manager 						 *)
  DT_NRF = 11;   (*  non-volitile RAM file manager			 *)
  DT_ISDN = 12;   (*  ISDN file manager						 *)
  DT_MPFM = 13;   (*  MPFM file manager						 *)
  DT_RTNFM = 14;   (*  Real-Time Network file manager 			 *)
  DT_SPF = 15;   (*  Serial Protocol file manager 			 *)
  DT_INET = 16;   (*  Inet file manager						 *)
  DT_MFM = 17;   (*  Multi-media file manager					 *)
  DT_DVM = 18;   (*  Generic device file manager				 *)
  DT_NULL = 19;   (*  Null file manager						 *)
  DT_DVDFM = 20;   (*  DVD file manager							 *)
  DT_MODFM = 21;   (*  Module directory file system manager 	 *)

(* * DT-CODES UP TO 127 RESERVED FOR MICROWARE USE ONLY * *)
(*  path delimiter definitions  *)

CONST  
  PATH_DELIM =  '/';
  PATH_ENTIRE = '@';
  PATH_DIR =    '.';

(*  pd_state bit field definitions  *)

CONST 
  PD_SYSTATE = 1H;   (*  indicates I/O request from system state  *)

(*  I/O process descriptor pointer definition  *)

TYPE 
  Io_proc = POINTER TO io_proc;

  As_list = POINTER TO list_as;

  io_proc = RECORD
    iop_sync     : os9types.u_int32;                    (*  I/O process descriptor identifier (code)  *)
    iop_id       : os9types.process_id;                 (*  process (and I/O process) identifier		 *)
    iop_pproc    : Io_proc;                              (*  previous process in new I/O queue 		 *)
    iop_nproc    : Io_proc;                              (*  next process in new I/O queue 			 *)
    iop_dlkn     : os9types.process_id;                 (*  next process in deadlock chain 			 *)
    iop_sched    : os9types.u_int32;                    (*  process scheduling priority 				 *)
    iop_owner    : os9types.owner_id;                   (*  process owner 							 *)
    iop_prior    : os9types.u_int16;                    (*  process priority 						 *)
    iop_expathsz : os9types.u_int16;                    (*  extended path table size	(entries)		 *)
    iop_rbytes   : os9types.u_int32;                    (*  bytes read by process 					 *)
    iop_wbytes   : os9types.u_int32;                    (*  bytes written by process 				 *)
    iop_paths    : ARRAY [0..os9process.NUMPATHS-1] OF os9types.path_id;(*  path translation table 					 *)
    iop_de_path  : os9types.path_id;                    (*  default execution directory path 		 *)
    iop_dd_path  : os9types.path_id;                    (*  default data directory path 				 *)
    iop_as_cur   : As_list;                              (*  current alias list element when reading 	 *)
    iop_rpthrds  : ARRAY [0..os9process.NUMPATHS-1] OF os9process.Pr_desc;(*  representative process threads for paths  *)
    iop_de_rpthrd: os9process.Pr_desc;                  (*  default execution directory path thread	 *)
    iop_dd_rpthrd: os9process.Pr_desc;                  (*  default data directory path thread		 *)
    iop_expaths  : os9types.Ptrpath_id;                       (*  pointer to extended path table 			 *)
    iop_resvd    : ARRAY [0..3-1] OF os9types.u_int32;  (*  reserved space							 *)
  END;

(* Type 'Io_proc' was declared here in the source file *)

(*  Device descriptor data definitions  *)

  dd_com = RECORD
<* IF DEFINED(BUILD_DESC) THEN *>
    dd_port   : os9types.u_int32;
<*ELSE*>
    dd_port   : SYSTEM.ADDRESS;     (*  device port address 			 *)
<*END*>
    dd_lu_num : os9types.u_int16;  (*  logical unit number 			 *)
    dd_pd_size: os9types.u_int16;  (*  path descriptor size 		 *)
    dd_type   : os9types.u_int16;  (*  device type 					 *)
    dd_mode   : os9types.u_int16;  (*  device mode capabilities 	 *)
    dd_fmgr   : os9types.u_int32;  (*  file manager name offset 	 *)
    dd_drvr   : os9types.u_int32;  (*  device driver name offset	 *)
    dd_class  : os9types.u_int16;  (*  sequential or random 		 *)
    dd_dscres : os9types.u_int16;  (*  (reserved) 					 *)
  END;

  Dd_com = POINTER TO dd_com;

(* Type 'dd_com' was declared here in the source file *)

(*  Device list element definition  *)

  Dev_list = POINTER TO devtab;

  Pd_com = POINTER TO pathcom;

  pathcom = RECORD
    pd_id   : os9types.path_id;                    (*  path number 							 *)
    pd_dev  : Dev_list;                             (*  device list element pointer 			 *)
    pd_own  : os9types.owner_id;                   (*  group/user number of path's creator 	 *)
    pd_paths: Pd_com;                               (*  list of open paths on device 		 *)
    pd_dpd  : Pd_com;                               (*  default directory path 				 *)
    pd_mode : os9types.u_int16;                    (*  mode (read/write/update) 			 *)
    pd_count: os9types.u_int16;                    (*  actual number of open images 		 *)
    pd_type : os9types.u_int16;                    (*  device type 							 *)
    pd_class: os9types.u_int16;                    (*  device class (sequential or random) 	 *)
    pd_cproc: os9types.process_id;                 (*  current process id 					 *)
    pd_plbuf: os9types.Ptru_char;                        (*  pointer to partial pathlist 			 *)
    pd_plist: os9types.Ptru_char;                        (*  pointer to complete pathlist 		 *)
    pd_plbsz: os9types.u_int32;                    (*  size of pathlist buffer 				 *)
    pd_lock : os9lock.lk_desc;                     (*  Queue ID for path descriptor 		 *)
    pd_async: SYSTEM.ADDRESS;                       (*  asynchronous I/O resource pointer	 *)
    pd_state: os9types.u_int32;                    (*  status bits (e.g. PD_SYSTATE)		 *)
    pd_rsrv : ARRAY [0..7-1] OF os9types.u_int32;  (*  reserved space 						 *)
  END;

  Ptrdevtab = POINTER TO devtab;

  devtab = RECORD
    v_sync    : os9types.u_int32;                    (*  device list entry identification code 	 *)
    v_nxt_dev : Ptrdevtab;                        (*  pointer to next element in list 			 *)
    v_prv_dev : Ptrdevtab;                        (*  pointer to previous element in list		 *)
    v_fm_mod  : os9module.Mh_com;                    (*  pointer to file manager module 			 *)
    v_fm_stat : SYSTEM.ADDRESS;                       (*  pointer to file manager static storage 	 *)
    v_dr_mod  : os9module.Mh_com;                    (*  pointer to driver module 				 *)
    v_dr_stat : SYSTEM.ADDRESS;                       (*  pointer to driver static storage 		 *)
    v_dd_mod  : os9module.Mh_com;                    (*  pointer to device descriptor module 		 *)
    v_lu_stat : SYSTEM.ADDRESS;                       (*  pointer to logical unit static storage 	 *)
    v_port    : SYSTEM.ADDRESS;                       (*  port address  *)
    v_paths   : Pd_com;                               (*  Linked list of open paths on this device. *)
    v_lu_num  : os9types.u_int16;                    (*  logical unit number						 *)
    v_mode    : os9types.u_int16;                    (*  Device mode capabilities 				 *)
    v_pd_size : os9types.u_int16;                    (*  Size of path descriptor 					 *)
    v_use_cnt : os9types.u_int16;                    (*  number of paths open on this device 		 *)
    v_lid     : os9lock.lock_id;                     (*  Queue ID for device list entry. 			 *)
    v_lock    : os9lock.lk_desc;                     (*  lock structure for device list entry		 *)
    v_cproc   : os9types.process_id;                 (*  current process 							 *)
    v_lu_size : os9types.u_int32;                    (*  size of logical unit static storage 		 *)
    v_type    : os9types.u_int16;                    (*  device type 								 *)
    v_class   : os9types.u_int16;                    (*  device class 							 *)
    v_iuse_cnt: os9types.u_int16;                    (*  count of intended users 					 *)
    v_res     : os9types.u_int16;                    (*  reserved word 							 *)
    v_fm_globs: os9types.u_int32;                    (*  file manager total static globals pointer *)
    v_dr_globs: os9types.u_int32;                    (*  driver total static globals pointer		 *)
    v_rsrv    : ARRAY [0..2-1] OF os9types.u_int32;  (*  reserved space							 *)
  END;

  dev_list = devtab;

(* Type 'Dev_list' was declared here in the source file *)

(*  Path descriptor common header definition  *)

  pd_com = pathcom;

(* Type 'Pd_com' was declared here in the source file *)

(*  Alias list element definition  *)

  list_as = RECORD
    as_size : os9types.u_int32;  (*  size of list element 				 *)
    as_prev : As_list;            (*  previous element in list 			 *)
    as_next : As_list;            (*  Next element in list 				 *)
    as_scnt : os9types.u_int16;  (*  number of elements in source string 	 *)
    as_ssize: os9types.u_int16;  (*  size of source (alias) string 		 *)
    as_tsize: os9types.u_int16;  (*  size of target string 				 *)
  END;

(* Type 'As_list' was declared here in the source file *)

  as_list = list_as;

(*  I/O process descriptor definition  *)
(*  Interrupt Polling Table format  *)
(*    Used for both vectored and autovector interrupts.  *)
(*    Warning: these variables must be declared in the following  *)
(*    order due to optimized code in the exception handler.  *)

  Pol_tbl = POINTER TO pol_tbl;

  pol_tbl = RECORD
    q_link: Pol_tbl;           (*  ptr to next entry in polling tbl  *)
    q_serv: SYSTEM.ADDRESS;    (*  Absolute service routine address  *)
    q_poll: SYSTEM.ADDRESS;    (*  Absolute polling address  *)
    q_stat: os9types.Ptru_char;     (*  Static storage address  *)
    q_prty: os9types.u_char;  (*  Priority (lower numbers are polled first)  *)
    q_rsv1: os9types.u_char;  (*  reserved  *)
  END;

(* Type 'Pol_tbl' was declared here in the source file *)

(*  These definitions are for device class.  Software which checks  *)
(*  this field should test the bits only, as the rest will probably  *)
(*  be defined in the future.  *)

CONST 
  DC_SEQ = 1H;
  DC_RND = 2H;

TYPE 
  PtrPtrdev_list = POINTER TO Ptrdevtab;

PROCEDURE _os_attach ( arg0: os9types.PtrSChar; arg1: os9types.u_int32;
		       arg2: PtrPtrdev_list ): os9types.error_code;

PROCEDURE _os_detach ( arg0: Ptrdevtab ): os9types.error_code;

TYPE 
  PtrPtrpd_com = POINTER TO Pd_com;

PROCEDURE _os_getpd ( arg0: os9types.path_id;
		      arg1: PtrPtrpd_com ): os9types.error_code;

TYPE 
  Ptrio_proc = POINTER TO io_proc;

  PtrPtrio_proc = POINTER TO Ptrio_proc;

PROCEDURE _os_get_ioproc ( arg0: os9types.process_id;
			   arg1: PtrPtrio_proc ): os9types.error_code;

PROCEDURE _os_alias ( arg0: os9types.PtrSChar; arg1: os9types.PtrSChar ): os9types.error_code;

PROCEDURE _os_getdl ( arg0: PtrPtrdev_list ): os9types.error_code;

PROCEDURE _os_rdalst ( arg0: os9types.PtrSChar;
		       arg1: os9types.Ptrpath_id ): os9types.error_code;

PROCEDURE _os_tranpn ( arg0: os9types.process_id; arg1: os9types.path_id;
		       arg2: os9types.Ptrpath_id ): os9types.error_code;

END os9io.
