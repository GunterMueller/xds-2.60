(* alloc.def  Feb 26  11:47:37  2000 *)
(* Generated by H2D v1.31.0 from alloc.h. *)
<*+ M2ADDTYPES *>
<*+ M2EXTENSIONS *>
<*+ NOHEADER *> 
<* IF NOT DEFINED(GENTYPEDEF) THEN *> <* NEW GENTYPEDEF+ *> <* END *>

DEFINITION MODULE ["C"] alloc;

IMPORT types, module, SYSTEM;
(* H2D:  Required IMPORT clause: 
IMPORT alloc, types, module;
*)

CONST 

<* IF DEFINED(_BUDDY) THEN *>

  MIN_LOG2 = 4;   (*  Minimum log2 value for memory allocation size  *)
  MIN_BUDDY = 4;   (*  Minimum power for minimum block size  *)
  MAX_BUDDY = 32;   (*  Maximum power for maxumum block size  *)
  BUDDY_MEM = 0BBH;   (*  Buddy memory color node identifier  *)

<* END *>
(*  basic (old-style) free memory and fragment list  *)

TYPE 
  Mem_list = POINTER TO memlist;

  memlist = RECORD
    nxt   : Mem_list;                             (*  ptr to next (higher addr) free block  *)
    prv   : Mem_list;                             (*  ptr to previous (lower addr) free block  *)
    blksiz: types.u_int32;                    (*  size of this block  *)
    resv  : ARRAY [0..1-1] OF types.u_int32;  (*  free block continues; at least 4 more bytes  *)
  END;

  mem_list = memlist;

(* Type 'Mem_list' was declared here in the source file *)

(*  Buddy allocator structure definitions.  *)
(*  Free block list structure definition  *)
<* IF DEFINED(_BUDDY) THEN *>

  free_block_list = RECORD
    nxt: Mem_list;
    prv: Mem_list;
  END;

  fblk_list = free_block_list;

  Fblk_list = POINTER TO free_block_list;

(*  memory list - one node per 'color' of memory for the buddy allocator  *)

  Mem_color = POINTER TO memcolor;

  memcolor = RECORD
    lolim    : types.Ptru_char;                        (*  beginning absolute address for this type	 *)
    hilim    : types.Ptru_char;                        (*  ending absolute address +1 for this type	 *)
    nxt      : Mem_color;                            (*  pointer to next color node				 *)
    prv      : Mem_color;                            (*  pointer to previous color node			 *)
    free     : ARRAY [0..2-1] OF Mem_list;           (*  head of free list						 *)
    frags    : types.u_int32;                    (*  total number of memory fragments			 *)
    totfree  : types.u_int32;                    (*  total amount of memory in list			 *)
    dma_addr : types.Ptru_char;                        (*  translation address for dma's, etc.		 *)
    access   : types.u_int16;                    (*  accessability							 *)
    type     : types.u_int16;                    (*  memory type code							 *)
    prior    : types.u_int16;                    (*  memory allocation priority				 *)
    alloctype: types.u_int16;                    (*  allocator type to use for this memory	 *)
    lock     : types.u_int32;                    (*  resource lock variable  *)
    lktype   : types.u_int32;                    (*  type of resource lock (shared vs. local mem)  *)
    pow2siz  : types.u_int32;                    (*  power of two size of memory total		 *)
    rsrv2    : ARRAY [0..2-1] OF types.u_int32;  (*  reserved space							 *)
    fblks    : ARRAY [0..28-1] OF fblk_list;         (*  free memory block lists					 *)
    tags     : ARRAY [0..1-1] OF types.u_char;   (*  tree of 1-bit block tags: 0=free, 1=busy	 *)
  END;

  mem_color = memcolor;
<* ELSE *>

  Mem_color = POINTER TO memcolor;

  memcolor = RECORD
    lolim    : types.Ptru_char;                        (*  beginning absolute address for this type 	 *)
    hilim    : types.Ptru_char;                        (*  ending absolute address +1 for this type 	 *)
    nxt      : Mem_color;                            (*  ptr to next color node 						 *)
    prv      : Mem_color;                            (*  ptr to previous color node 					 *)
    free     : ARRAY [0..2-1] OF Mem_list;           (*  head of free list ptr 						 *)
    frags    : types.u_int32;                    (*  total number of memory fragments 			 *)
    totfree  : types.u_int32;                    (*  total amount of memory in list 				 *)
    dma_addr : types.Ptru_char;                        (*  translation address for dma's, etc. 			 *)
    access   : types.u_int16;                    (*  accessability 								 *)
    type     : types.u_int16;                    (*  memory type code 							 *)
    prior    : types.u_int16;                    (*  memory allocation priority 					 *)
    alloctype: types.u_int16;                    (*  allocator type to use for this memory		 *)
    lock     : types.u_int32;                    (*  resource lock variable  *)
    lktype   : types.u_int32;                    (*  type of resource lock (shared vs. local mem)  *)
    granule  : types.u_int32;                    (*  granularity; block size of memory units 		 *)
    rsrv2    : ARRAY [0..2-1] OF types.u_int32;  (*  reserved space 								 *)
  END;

  mem_color = memcolor;

<* END *>

(* Type 'Mem_color' was declared here in the source file *)

(*  Shared and NVRAM need this at *lolim  *)

  mem2 = RECORD
    inized: types.u_int16;  (*  check pattern; memory initialized?  *)
    status: types.u_int16;  (*  access semaphore  *)
    free  : types.u_int32;  (*  OFFSET (from lolim) to free list ptr  *)
    mdir  : SYSTEM.ADDRESS;     (*  auxillary module directory ptr ?  *)
    resv  : SYSTEM.ADDRESS;     (*  other stuff ? (ram disk ptr, ...)  *)
  END;

(*  MemDefs module	                          *)

  Mh_mem = POINTER TO module.mh_com;

  mh_mem = module.mh_com;

(*  initialization table (in memdefs module data area)  *)

  mem_table = RECORD
    type    : types.u_int16;                    (*  memory type code  *)
    prior   : types.u_int16;                    (*  memory allocation priority  *)
    access  : types.u_int16;                    (*  access permissions  *)
    blksiz  : types.u_int16;                    (*  search block size  *)
    lolim   : types.Ptru_char;                        (*  beginning absolute address for this type  *)
    hilim   : types.Ptru_char;                        (*  ending absolute address +1 for this type  *)
    descr   : types.u_int32;                    (*  optional description string offset  *)
    dma_addr: types.u_int32;                    (*  address translation address for dma's, etc.  *)
    rsvd2   : ARRAY [0..2-1] OF types.u_int32;  (*  reserved, must be zero  *)
  END;

  Mem_tbl = POINTER TO mem_table;

  mem_tbl = mem_table;

(*  access bit definitions  *)


CONST 
  B_USERRAM = 1H;    (*  memory allocatable by user procs  *)
  B_PARITY = 2H;     (*  parity memory; must be initialized  *)
  B_ROM = 4H;        (*  read-only memory; searched for modules  *)
  B_NVRAM = 8H;      (*  non-volatile RAM; searched for modules  *)
  B_SHARED = 10H;    (*  shared memory  *)

END alloc.
