(* h2d_semaphore.def  Apr 7  11:17:54  2000 *)
(* Generated by H2D v1.31.0 from semaphore.h. *)
<*+ M2ADDTYPES *>
<*+ M2EXTENSIONS *>
<*+ NOHEADER *> 
<* IF NOT DEFINED(GENTYPEDEF) THEN *> <* NEW GENTYPEDEF+ *> <* END *>

DEFINITION MODULE ["C"] semaphore;

IMPORT types, process, SYSTEM;
(* H2D:  Required IMPORT clause: 
IMPORT semaphore, types, process;
*)
CONST 
  P_OPERATION = 1;   (*  Reserve semaphore  *)
  V_OPERATION = 2;   (*  Release semaphore  *)

CONST 
  S_CASFLAG = 1H;   (*  cas instruction available  *)
  S_NONATOMIC = 2H;   (*  if set, target does not have atomic test/set  *)

(*  Semaphore structure definition  *)

TYPE 
  semaphore = RECORD
    s_value   : types.sema_val;                   (*  semaphore value (free/busy status)  *)
    s_lock    : types.u_int32;                    (*  semaphore structure lock (use count)  *)
    s_qnext   : process.Pr_desc;                  (*  wait queue for process descriptors  *)
    s_qprev   : process.Pr_desc;                  (*  wait queue for process descriptors  *)
    s_length  : types.u_int32;                    (*  current length of wait queue  *)
    s_owner   : types.u_int32;                    (*  current owner of semaphore (process ID)  *)
    s_user    : types.u_int32;                    (*  reserved for users         *)
    s_flags   : types.u_int32;                    (*  general purpose bit-field flags  *)
    s_sync    : types.u_int32;                    (*  integrity sync code  *)
    s_reserved: ARRAY [0..3-1] OF types.u_int32;  (*  reserved for system use  *)
  END;

  Semaphore = POINTER TO semaphore;

PROCEDURE _os_sema_init ( arg0: Semaphore ): types.error_code;

PROCEDURE _os_sema_p ( arg0: Semaphore ): types.error_code;

PROCEDURE _os_sema_term ( arg0: Semaphore ): types.error_code;

PROCEDURE _os_sema_v ( arg0: Semaphore ): types.error_code;

END semaphore.
