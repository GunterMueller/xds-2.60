(* events.def  Feb 27  15:51:13  2000 *)
(* Generated by H2D v1.31.0 from events.h. *)
<*+ M2ADDTYPES *>
<*+ M2EXTENSIONS *>
<*+ NOHEADER *> 
<* IF NOT DEFINED(GENTYPEDEF) THEN *> <* NEW GENTYPEDEF+ *> <* END *>

DEFINITION MODULE ["C"] events;

IMPORT types, process, SYSTEM;
(* H2D:  Required IMPORT clause: 
IMPORT events, types, process;
*)


TYPE 
  evstr = RECORD
    ev_id   : types.event_id;                   (*  event id number  *)
    ev_namsz: types.u_int16;                    (*  size of memory allocate for name  *)
    ev_name : types.Ptru_char;                        (*  event name pointer  *)
    ev_link : types.u_int16;                    (*  event use count  *)
    ev_perm : types.u_int16;                    (*  event permissions  *)
    ev_owner: types.owner_id;                   (*  event owner (creator)  *)
    ev_winc : types.int16;                      (*  wait increment value  *)
    ev_sinc : types.int16;                      (*  signal increment value  *)
    ev_value: types.int32;                      (*  current event value  *)
    ev_quen : process.Pr_desc;                  (*  next event in queue  *)
    ev_quep : process.Pr_desc;                  (*  previous event in queue  *)
    ev_resv : ARRAY [0..14-1] OF types.u_char;  (*  reserved  *)
  END;

  ev_str = evstr;

  Ev_str = POINTER TO evstr;

(*  Definition for Event Information Structure  *)

  ev_infostr = RECORD
    ev_id   : types.event_id;  (*  event id number  *)
    ev_link : types.u_int16;   (*  event use count  *)
    ev_perm : types.u_int16;   (*  event permissions  *)
    ev_owner: types.owner_id;  (*  event owner (creator)  *)
    ev_winc : types.int16;     (*  wait increment value  *)
    ev_sinc : types.int16;     (*  signal increment value  *)
    ev_value: types.int32;     (*  current event value  *)
  END;

  Ev_infostr = POINTER TO ev_infostr;

PROCEDURE _os_ev_allclr ( arg0: types.event_id; arg1: types.Ptrint32;
			  arg2: types.Ptrsignal_code;
			  arg3: types.u_int32 ): types.error_code;

PROCEDURE _os_ev_allset ( arg0: types.event_id; arg1: types.Ptrint32;
			  arg2: types.Ptrsignal_code;
			  arg3: types.u_int32 ): types.error_code;

PROCEDURE _os_ev_anyclr ( arg0: types.event_id; arg1: types.Ptrint32;
			  arg2: types.Ptrsignal_code;
			  arg3: types.u_int32 ): types.error_code;

PROCEDURE _os_ev_anyset ( arg0: types.event_id; arg1: types.Ptrint32;
			  arg2: types.Ptrsignal_code;
			  arg3: types.u_int32 ): types.error_code;

PROCEDURE _os_ev_change ( arg0: types.event_id; arg1: types.Ptrint32;
			  arg2: types.Ptrsignal_code; arg3: types.u_int32;
			  arg4: types.u_int32 ): types.error_code;

PROCEDURE _os_ev_creat ( arg0: types.int32; arg1: types.int32;
			 arg2: types.u_int32; arg3: types.Ptrsignal_code;
			 arg4: types.PtrSChar; arg5: types.int32;
			 arg6: types.u_int32 ): types.error_code;

PROCEDURE _os_ev_delete ( arg0: types.PtrSChar ): types.error_code;

PROCEDURE _os_ev_info ( arg0: types.event_id; arg1: types.u_int32;
			arg2: SYSTEM.ADDRESS ): types.error_code;

PROCEDURE _os_ev_link ( arg0: types.PtrSChar;
			arg1: types.Ptrsignal_code ): types.error_code;

PROCEDURE _os_ev_pulse ( arg0: types.event_id; arg1: types.Ptrint32;
			 arg2: types.int32 ): types.error_code;

PROCEDURE _os_ev_read ( arg0: types.event_id;
			arg1: types.Ptrint32 ): types.error_code;

PROCEDURE _os_ev_set ( arg0: types.event_id; arg1: types.Ptrint32;
		       arg2: types.u_int32 ): types.error_code;

PROCEDURE _os_ev_setand ( arg0: types.event_id; arg1: types.Ptrint32;
			  arg2: types.u_int32;
			  actv_flag: types.u_int32 ): types.error_code;

PROCEDURE _os_ev_setor ( arg0: types.event_id; arg1: types.Ptrint32;
			 arg2: types.u_int32;
			 arg3: types.u_int32 ): types.error_code;

PROCEDURE _os_ev_setr ( arg0: types.event_id; arg1: types.Ptrint32;
			arg2: types.u_int32 ): types.error_code;

PROCEDURE _os_ev_setxor ( arg0: types.event_id; arg1: types.Ptrint32;
			  arg2: types.u_int32;
			  arg3: types.u_int32 ): types.error_code;

PROCEDURE _os_ev_signal ( arg0: types.event_id; arg1: types.Ptrint32;
			  arg2: types.u_int32 ): types.error_code;

PROCEDURE _os_ev_tstset ( arg0: types.event_id; arg1: types.Ptrint32;
			  arg2: types.Ptrsignal_code;
			  arg3: types.u_int32 ): types.error_code;

PROCEDURE _os_ev_unlink ( arg0: types.event_id ): types.error_code;

PROCEDURE _os_ev_wait ( arg0: types.event_id; arg1: types.Ptrint32;
			arg2: types.Ptrsignal_code; arg3: types.int32;
			arg4: types.int32 ): types.error_code;

PROCEDURE _os_ev_waitr ( arg0: types.event_id; arg1: types.Ptrint32;
			 arg2: types.Ptrsignal_code; arg3: types.Ptrint32;
			 arg4: types.Ptrint32 ): types.error_code;

END events.
