(* os9module.def  Feb 26  11:3:48  2000 *)
(* Generated by H2D v1.31.0 from os9module.h. *)
<*+ M2ADDTYPES *>
<*+ M2EXTENSIONS *>
<*+ NOHEADER *> 
<* IF NOT DEFINED(GENTYPEDEF) THEN *> <* NEW GENTYPEDEF+ *> <* END *>

DEFINITION MODULE ["C"] os9module;

IMPORT os9types, SYSTEM;
(* H2D:  Required IMPORT clause: 
IMPORT os9module, os9types;
*)


CONST 
  N_M_PARITY   =  56+16+1-2; (*sizeof(mh_com)-sizeof(u_int16)*)
  OLD_M_PARITY = 46;
  M_PARITY     = N_M_PARITY;
  MODREV = 2;   (*  module format revision  *)
  CRCCON = 800FE3H;   (*  crc polynomial constant *)

CONST MODSYNK = 0F00DH;

(*  Module access permission values  *)

CONST 
  MP_OWNER_READ = 1H;
  MP_OWNER_WRITE = 2H;
  MP_OWNER_EXEC = 4H;
  MP_GROUP_READ = 10H;
  MP_GROUP_WRITE = 20H;
  MP_GROUP_EXEC = 40H;
  MP_WORLD_READ = 100H;
  MP_WORLD_WRITE = 200H;
  MP_WORLD_EXEC = 400H;
  MP_WORLD_ACCESS = 777H;
  MP_OWNER_MASK = 0FH;
  MP_GROUP_MASK = 0F0H;
  MP_WORLD_MASK = 0F00H;
  MP_SYSTM_MASK = 0F000H;

(*  Module Type/Language values  *)

CONST 
  MT_ANY = 0;
  MT_PROGRAM = 1H;
  MT_SUBROUT = 2H;
  MT_MULTI = 3H;
  MT_DATA = 4H;
  MT_CDBDATA = 5H;
  MT_TRAPLIB = 0BH;
  MT_SYSTEM = 0CH;
  MT_FILEMAN = 0DH;
  MT_DEVDRVR = 0EH;
  MT_DEVDESC = 0FH;
  MT_MASK = 0FF00H;
  ML_ANY = 0;
  ML_OBJECT = 1;
  ML_ICODE = 2;
  ML_PCODE = 3;
  ML_CCODE = 4;
  ML_CBLCODE = 5;
  ML_FRTNCODE = 6;
  ML_MASK = 0FFH;

(*  Module Attribute values  *)

CONST 
  MA_REENT = 80H;
  MA_GHOST = 40H;
  MA_SUPER = 20H;
  MA_MASK = 0FF00H;
  MR_MASK = 0FFH;

TYPE 
  mh_com = RECORD
    m_sync  : os9types.u_int16;       (*  sync bytes       								 *)
    m_sysrev: os9types.u_int16;       (*  system revision check value						 *)
    m_size  : os9types.u_int32;       (*  module size										 *)
    m_owner : os9types.owner_id;      (*  group/user id									 *)
    m_name  : os9types.u_int32;       (*  offset to module name							 *)
    m_access: os9types.u_int16;       (*  access permissions								 *)
    m_tylan : os9types.u_int16;       (*  type/lang										 *)
    m_attrev: os9types.u_int16;       (*  attributes/revision   							 *)
    m_edit  : os9types.u_int16;       (*  edition											 *)
    m_needs : os9types.u_int32;       (*  module hardware requirements flags  (reserved)	 *)
    m_share : os9types.u_int32;       (*  shared data offset								 *)
    m_symbol: os9types.u_int32;       (*  symbol table offset								 *)
    m_exec  : os9types.u_int32;       (*  offset to execution entry point					 *)
    m_excpt : os9types.u_int32;       (*  offset to exception entry point					 *)
    m_data  : os9types.u_int32;       (*  data storage requirement							 *)
    m_stack : os9types.u_int32;       (*  stack size										 *)
    m_idata : os9types.u_int32;       (*  offset to initialized data						 *)
    m_idref : os9types.u_int32;       (*  offset to data reference lists					 *)
    m_init  : os9types.u_int32;       (*  initialization routine offset					 *)
    m_term  : os9types.u_int32;       (*  termination routine offset						 *)
    m_dbias : os9types.u_int32;       (*  data area bias									 *)
    m_cbias : os9types.u_int32;       (*  code area bias									 *)
    m_ident : os9types.u_int16;       (*  ident code for ident program						 *)
    m_spare : ARRAY [0..8-1] OF CHAR;  (*  reserved bytes									 *)
    m_parity: os9types.u_int16;       (*  header parity									 *)
  END;

  Mh_com = POINTER TO mh_com;

(*  Executable memory module  *)

  Mh_exec = Mh_com;

  mh_exec = mh_com;

(*  Data memory module  *)

  Mh_data = Mh_com;

  mh_data = mh_com;

(*  File manager memory module  *)

  Mh_fman = Mh_com;

  mh_fman = mh_com;

(*  device driver module  *)

  Mh_drvr = Mh_com;

  mh_drvr = mh_com;

(*  trap handler module  *)

  mh_trap = mh_com;

  Mh_trap = Mh_com;

(*  Device descriptor module  *)

  Mh_dev = Mh_com;

  mh_dev = mh_com;

(*  Configuration module  *)

  Mh_config = Mh_com;

  mh_config = mh_com;

(* #if !defined(_MODDIR_H) && (defined(_ANSI_EXT) || defined(__STDC__) || defined(__cplusplus)) *)
(*  go get _os_fmod (and others)  *)
(*   #include <os9moddir.h>  *)
(* #endif                 *)

PROCEDURE _os_crc ( arg0: SYSTEM.ADDRESS; arg1: os9types.u_int32;
		    arg2: os9types.Ptrint32 ): os9types.error_code;

TYPE 
  PtrPtrmh_data = POINTER TO Mh_com;

PROCEDURE _os_datmod ( arg0: os9types.PtrSChar; arg1: os9types.u_int32;
		       arg2: os9types.Ptru_int16; arg3: os9types.Ptru_int16;
		       arg4: os9types.u_int32; arg5: os9types.PtrPtrVoid;
		       arg6: PtrPtrmh_data ): os9types.error_code;

PROCEDURE _os_get_moddir ( arg0: SYSTEM.ADDRESS;
			   arg1: os9types.Ptru_int32 ): os9types.error_code;

PROCEDURE _os_initdata ( arg0: Mh_com; arg1: SYSTEM.ADDRESS ): os9types.error_code;

PROCEDURE _os_link ( arg0: os9types.PtrPtrSChar; arg1: PtrPtrmh_data;
		     arg2: os9types.PtrPtrVoid; arg3: os9types.Ptru_int16;
		     arg4: os9types.Ptru_int16 ): os9types.error_code;

PROCEDURE _os_linkm ( arg0: Mh_com; arg1: os9types.PtrPtrVoid; arg2: os9types.Ptru_int16;
		      arg3: os9types.Ptru_int16 ): os9types.error_code;

PROCEDURE _os_load ( arg0: os9types.PtrSChar; arg1: PtrPtrmh_data;
		     arg2: os9types.PtrPtrVoid; arg3: os9types.u_int32;
		     arg4: os9types.Ptru_int16; arg5: os9types.Ptru_int16;
		     arg6: os9types.u_int32 ): os9types.error_code;

PROCEDURE _os_loadp ( arg0: os9types.PtrSChar; arg1: os9types.u_int32; arg2: os9types.PtrSChar;
		      arg3: PtrPtrmh_data ): os9types.error_code;

PROCEDURE _os_mkmodule ( arg0: os9types.PtrSChar; arg1: os9types.u_int32;
			 arg2: os9types.Ptru_int16; arg3: os9types.Ptru_int16;
			 arg4: os9types.u_int32; arg5: os9types.PtrPtrVoid;
			 arg6: PtrPtrmh_data;
			 arg7: os9types.u_int32 ): os9types.error_code;

PROCEDURE _os_modaddr ( arg0: SYSTEM.ADDRESS;
			arg1: PtrPtrmh_data ): os9types.error_code;

PROCEDURE _os_setcrc ( arg0: Mh_com ): os9types.error_code;

PROCEDURE _os_slink ( arg0: os9types.u_int32; arg1: os9types.PtrSChar;
		      arg2: os9types.PtrPtrVoid; arg3: os9types.PtrPtrVoid;
		      arg4: PtrPtrmh_data ): os9types.error_code;

PROCEDURE _os_slinkm ( arg0: os9types.u_int32; arg1: Mh_com; arg2: os9types.PtrPtrVoid;
		       arg3: os9types.PtrPtrVoid ): os9types.error_code;

PROCEDURE _os_unlink ( arg0: Mh_com ): os9types.error_code;

PROCEDURE _os_unload ( arg0: os9types.PtrSChar;
		       arg1: os9types.u_int32 ): os9types.error_code;

PROCEDURE _os_tlink ( arg0: os9types.u_int32; arg1: os9types.PtrSChar;
		      arg2: os9types.PtrPtrVoid; arg3: PtrPtrmh_data;
                      arg4: SYSTEM.ADDRESS;
		      arg5: os9types.u_int32 ): os9types.error_code;

PROCEDURE _os_tlinkm ( arg0: os9types.u_int32; arg1: Mh_com; arg2: os9types.PtrPtrVoid;
                       arg3: SYSTEM.ADDRESS;
		       arg4: os9types.u_int32 ): os9types.error_code;

PROCEDURE _os_iodel ( arg0: Mh_com ): os9types.error_code;

PROCEDURE _os_vmodul ( arg0: Mh_com; arg1: Mh_com;
		       arg2: os9types.u_int32 ): os9types.error_code;

END os9module.
